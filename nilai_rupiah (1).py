# -*- coding: utf-8 -*-
"""Nilai_Rupiah.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yYOsg6UN8VzYYt422Pcv7OyGCeQ1ASiS
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
plt.style.use("fivethirtyeight")
# %matplotlib inline

# For reading stock data from yahoo
from pandas_datareader.data import DataReader

# For time stamps
from datetime import datetime

"""**Import Dataset**"""

df = pd.read_excel('USD_IDR Historical Data.xlsx', index_col=0)
df.head(10)

plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Price'])
plt.title('Data Nilai Tukar Rupiah Mei 2015 - Mei 2020', fontsize=15, fontweight=20)
plt.xlabel(' Tanggal ', fontsize=15)
plt.ylabel(' Rupiah (IDR)', fontsize=15)
plt.show()

df.info()

"""**Make Dataset**"""

# Buat Dataframe Baru dg hanya dari kolom Price
data = df.filter(['Price'])

# Ubah Dataframe menjadi array
dataset_fix = data.values

# Buat dataset untuk training sebesar 80% dari total dataset_fix
dataset_train = int(np.ceil(len(dataset_fix)*0.8))

print("Dataset Total : " + str(len(dataset_fix)))
print("Dataset Training : " + str(dataset_train))

"""**Data Preprocessing - Feature Scalling**"""

from sklearn.preprocessing import MinMaxScaler

scaled = MinMaxScaler(feature_range = (0, 1))
scaled_data = scaled.fit_transform(data)

train_data = scaled_data[0:int(dataset_train), :] #0-1059

X_train =[]
y_train = []

for i in range(60, 1059): #Jumlah Dataset Tarining 60 - 1059
    X_train.append(train_data[i-60:i, 0])
    y_train.append(train_data[i, 0])

# Convert to ARRAY
X_train, y_train = np.array(X_train), np.array(y_train)

# Reshaping
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_train.shape

"""**Create RNN Model**"""

from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout

#Build the LSTM model
model = Sequential()
model.add(LSTM(100, return_sequences=True, input_shape= (X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(100, return_sequences= True))
model.add(Dropout(0.2))
model.add(LSTM(100, return_sequences= True))
model.add(Dropout(0.2))
model.add(LSTM(100, return_sequences= False))
model.add(Dropout(0.2))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.summary()

model.fit(X_train, y_train, epochs=100, batch_size=32)

test_data = scaled_data[dataset_train-60 : , :] #1059-60 / 1059

#Create the data sets x_test and y_test
x_test = []
y_test = dataset_fix[dataset_train:, :]
for i in range(60, len(test_data)):
    x_test.append(test_data[i-60:i, 0])

# Convert the data to a numpy array
x_test = np.array(x_test)

#Reshaping
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

# Get the models predicted price values 
predictions = model.predict(x_test)
predictions = scaled.inverse_transform(predictions)

# Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))
rmse

# Plot the data
train = data[:dataset_train]
valid = data[dataset_train:]
valid['Predictions'] = predictions

# Visualize the data
plt.figure(figsize=(12,7))
plt.title('Prediksi Nilai Tukar Rupiah ', fontsize=20)
plt.xlabel('Tanggal',fontsize=18)
plt.ylabel('Rupiah (Rp)', fontsize=18)
plt.plot(train['Price'],linewidth=3)
plt.plot(valid[['Price', 'Predictions']],linewidth=3)
plt.legend(['Nilai Tukar Training','Nilai Tukar Asli', 'Nilai Tukar Prediksi'], loc='upper left', fontsize=15)
plt.savefig(fname='Model.png')
plt.show()

# Plot the data
train = data[:dataset_train]
valid = data[dataset_train:]
valid['Predictions'] = predictions

# Visualize the data
plt.figure(figsize=(12,7))
plt.title('Prediksi Nilai Tukar Rupiah 7 Mei 2019 - 14 Mei 2020 ', fontsize=19)
plt.xlabel('Tanggal',fontsize=18)
plt.ylabel('Rupiah (Rp)', fontsize=18)
#plt.plot(train['Price'])
plt.plot(valid[['Price', 'Predictions']])
plt.legend(['Nilai Tukar Asli', 'Nilai Tukar Prediksi'], loc='upper left', fontsize=15)
plt.savefig(fname='ModelPrediksi.png')
plt.show()

valid['Price-Predictions']=abs(valid['Price'] - valid['Predictions'])
valid

valid['Price-Predictions'].mean() #Seliish rata-rata antara nolai asli dengan nilai prediksi

valid['Price-Predictions'].min() # Selisih terkecil

valid['Price-Predictions'].max() # Selisih terbesar